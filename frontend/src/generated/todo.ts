// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.14.0
// source: todo.proto

/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "todo";

/** Todo message */
export interface Todo {
  id: number;
  description: string;
  completed: boolean;
  /** ISO 8601 timestamp */
  createdAt: string;
  /** ISO 8601 timestamp */
  updatedAt: string;
}

/** Request messages */
export interface GetTodosRequest {
}

export interface CreateTodoRequest {
  /** Required, 1-500 characters */
  description: string;
}

export interface UpdateTodoRequest {
  /** Required - todo ID to update */
  id: number;
  /** Optional - new description */
  description?:
    | string
    | undefined;
  /** Optional - new completion status */
  completed?: boolean | undefined;
}

export interface DeleteTodoRequest {
  /** Required - todo ID to delete */
  id: number;
}

/** Response messages */
export interface GetTodosResponse {
  todos: Todo[];
}

export interface CreateTodoResponse {
  todo: Todo | undefined;
}

export interface UpdateTodoResponse {
  todo: Todo | undefined;
}

/** Empty response for successful deletion */
export interface DeleteTodoResponse {
}

/** Error handling */
export interface ErrorDetail {
  field: string;
  message: string;
}

export interface ErrorResponse {
  message: string;
  code: number;
  details: ErrorDetail[];
}

function createBaseTodo(): Todo {
  return { id: 0, description: "", completed: false, createdAt: "", updatedAt: "" };
}

export const Todo = {
  encode(message: Todo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.completed !== false) {
      writer.uint32(24).bool(message.completed);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(42).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Todo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTodo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.completed = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Todo {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      completed: isSet(object.completed) ? globalThis.Boolean(object.completed) : false,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: Todo): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.completed !== false) {
      obj.completed = message.completed;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Todo>, I>>(base?: I): Todo {
    return Todo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Todo>, I>>(object: I): Todo {
    const message = createBaseTodo();
    message.id = object.id ?? 0;
    message.description = object.description ?? "";
    message.completed = object.completed ?? false;
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseGetTodosRequest(): GetTodosRequest {
  return {};
}

export const GetTodosRequest = {
  encode(_: GetTodosRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetTodosRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTodosRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetTodosRequest {
    return {};
  },

  toJSON(_: GetTodosRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTodosRequest>, I>>(base?: I): GetTodosRequest {
    return GetTodosRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTodosRequest>, I>>(_: I): GetTodosRequest {
    const message = createBaseGetTodosRequest();
    return message;
  },
};

function createBaseCreateTodoRequest(): CreateTodoRequest {
  return { description: "" };
}

export const CreateTodoRequest = {
  encode(message: CreateTodoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.description !== "") {
      writer.uint32(10).string(message.description);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateTodoRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTodoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTodoRequest {
    return { description: isSet(object.description) ? globalThis.String(object.description) : "" };
  },

  toJSON(message: CreateTodoRequest): unknown {
    const obj: any = {};
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateTodoRequest>, I>>(base?: I): CreateTodoRequest {
    return CreateTodoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateTodoRequest>, I>>(object: I): CreateTodoRequest {
    const message = createBaseCreateTodoRequest();
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseUpdateTodoRequest(): UpdateTodoRequest {
  return { id: 0, description: undefined, completed: undefined };
}

export const UpdateTodoRequest = {
  encode(message: UpdateTodoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.description !== undefined) {
      writer.uint32(18).string(message.description);
    }
    if (message.completed !== undefined) {
      writer.uint32(24).bool(message.completed);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateTodoRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTodoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.completed = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTodoRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      completed: isSet(object.completed) ? globalThis.Boolean(object.completed) : undefined,
    };
  },

  toJSON(message: UpdateTodoRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.completed !== undefined) {
      obj.completed = message.completed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateTodoRequest>, I>>(base?: I): UpdateTodoRequest {
    return UpdateTodoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateTodoRequest>, I>>(object: I): UpdateTodoRequest {
    const message = createBaseUpdateTodoRequest();
    message.id = object.id ?? 0;
    message.description = object.description ?? undefined;
    message.completed = object.completed ?? undefined;
    return message;
  },
};

function createBaseDeleteTodoRequest(): DeleteTodoRequest {
  return { id: 0 };
}

export const DeleteTodoRequest = {
  encode(message: DeleteTodoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteTodoRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTodoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTodoRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: DeleteTodoRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteTodoRequest>, I>>(base?: I): DeleteTodoRequest {
    return DeleteTodoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteTodoRequest>, I>>(object: I): DeleteTodoRequest {
    const message = createBaseDeleteTodoRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetTodosResponse(): GetTodosResponse {
  return { todos: [] };
}

export const GetTodosResponse = {
  encode(message: GetTodosResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.todos) {
      Todo.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetTodosResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTodosResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.todos.push(Todo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTodosResponse {
    return { todos: globalThis.Array.isArray(object?.todos) ? object.todos.map((e: any) => Todo.fromJSON(e)) : [] };
  },

  toJSON(message: GetTodosResponse): unknown {
    const obj: any = {};
    if (message.todos?.length) {
      obj.todos = message.todos.map((e) => Todo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTodosResponse>, I>>(base?: I): GetTodosResponse {
    return GetTodosResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTodosResponse>, I>>(object: I): GetTodosResponse {
    const message = createBaseGetTodosResponse();
    message.todos = object.todos?.map((e) => Todo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateTodoResponse(): CreateTodoResponse {
  return { todo: undefined };
}

export const CreateTodoResponse = {
  encode(message: CreateTodoResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.todo !== undefined) {
      Todo.encode(message.todo, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateTodoResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTodoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.todo = Todo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTodoResponse {
    return { todo: isSet(object.todo) ? Todo.fromJSON(object.todo) : undefined };
  },

  toJSON(message: CreateTodoResponse): unknown {
    const obj: any = {};
    if (message.todo !== undefined) {
      obj.todo = Todo.toJSON(message.todo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateTodoResponse>, I>>(base?: I): CreateTodoResponse {
    return CreateTodoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateTodoResponse>, I>>(object: I): CreateTodoResponse {
    const message = createBaseCreateTodoResponse();
    message.todo = (object.todo !== undefined && object.todo !== null) ? Todo.fromPartial(object.todo) : undefined;
    return message;
  },
};

function createBaseUpdateTodoResponse(): UpdateTodoResponse {
  return { todo: undefined };
}

export const UpdateTodoResponse = {
  encode(message: UpdateTodoResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.todo !== undefined) {
      Todo.encode(message.todo, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateTodoResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTodoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.todo = Todo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTodoResponse {
    return { todo: isSet(object.todo) ? Todo.fromJSON(object.todo) : undefined };
  },

  toJSON(message: UpdateTodoResponse): unknown {
    const obj: any = {};
    if (message.todo !== undefined) {
      obj.todo = Todo.toJSON(message.todo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateTodoResponse>, I>>(base?: I): UpdateTodoResponse {
    return UpdateTodoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateTodoResponse>, I>>(object: I): UpdateTodoResponse {
    const message = createBaseUpdateTodoResponse();
    message.todo = (object.todo !== undefined && object.todo !== null) ? Todo.fromPartial(object.todo) : undefined;
    return message;
  },
};

function createBaseDeleteTodoResponse(): DeleteTodoResponse {
  return {};
}

export const DeleteTodoResponse = {
  encode(_: DeleteTodoResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteTodoResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTodoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteTodoResponse {
    return {};
  },

  toJSON(_: DeleteTodoResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteTodoResponse>, I>>(base?: I): DeleteTodoResponse {
    return DeleteTodoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteTodoResponse>, I>>(_: I): DeleteTodoResponse {
    const message = createBaseDeleteTodoResponse();
    return message;
  },
};

function createBaseErrorDetail(): ErrorDetail {
  return { field: "", message: "" };
}

export const ErrorDetail = {
  encode(message: ErrorDetail, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.field !== "") {
      writer.uint32(10).string(message.field);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ErrorDetail {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.field = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ErrorDetail {
    return {
      field: isSet(object.field) ? globalThis.String(object.field) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: ErrorDetail): unknown {
    const obj: any = {};
    if (message.field !== "") {
      obj.field = message.field;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ErrorDetail>, I>>(base?: I): ErrorDetail {
    return ErrorDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ErrorDetail>, I>>(object: I): ErrorDetail {
    const message = createBaseErrorDetail();
    message.field = object.field ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseErrorResponse(): ErrorResponse {
  return { message: "", code: 0, details: [] };
}

export const ErrorResponse = {
  encode(message: ErrorResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.code !== 0) {
      writer.uint32(16).int32(message.code);
    }
    for (const v of message.details) {
      ErrorDetail.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ErrorResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.code = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.details.push(ErrorDetail.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ErrorResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      details: globalThis.Array.isArray(object?.details) ? object.details.map((e: any) => ErrorDetail.fromJSON(e)) : [],
    };
  },

  toJSON(message: ErrorResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.details?.length) {
      obj.details = message.details.map((e) => ErrorDetail.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ErrorResponse>, I>>(base?: I): ErrorResponse {
    return ErrorResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ErrorResponse>, I>>(object: I): ErrorResponse {
    const message = createBaseErrorResponse();
    message.message = object.message ?? "";
    message.code = object.code ?? 0;
    message.details = object.details?.map((e) => ErrorDetail.fromPartial(e)) || [];
    return message;
  },
};

/** Todo service definition */
export interface TodoService {
  /** Get all todos */
  GetTodos(request: DeepPartial<GetTodosRequest>, metadata?: grpc.Metadata): Promise<GetTodosResponse>;
  /** Create a new todo */
  CreateTodo(request: DeepPartial<CreateTodoRequest>, metadata?: grpc.Metadata): Promise<CreateTodoResponse>;
  /** Update an existing todo */
  UpdateTodo(request: DeepPartial<UpdateTodoRequest>, metadata?: grpc.Metadata): Promise<UpdateTodoResponse>;
  /** Delete a todo */
  DeleteTodo(request: DeepPartial<DeleteTodoRequest>, metadata?: grpc.Metadata): Promise<DeleteTodoResponse>;
}

export class TodoServiceClientImpl implements TodoService {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.GetTodos = this.GetTodos.bind(this);
    this.CreateTodo = this.CreateTodo.bind(this);
    this.UpdateTodo = this.UpdateTodo.bind(this);
    this.DeleteTodo = this.DeleteTodo.bind(this);
  }

  GetTodos(request: DeepPartial<GetTodosRequest>, metadata?: grpc.Metadata): Promise<GetTodosResponse> {
    return this.rpc.unary(TodoServiceGetTodosDesc, GetTodosRequest.fromPartial(request), metadata);
  }

  CreateTodo(request: DeepPartial<CreateTodoRequest>, metadata?: grpc.Metadata): Promise<CreateTodoResponse> {
    return this.rpc.unary(TodoServiceCreateTodoDesc, CreateTodoRequest.fromPartial(request), metadata);
  }

  UpdateTodo(request: DeepPartial<UpdateTodoRequest>, metadata?: grpc.Metadata): Promise<UpdateTodoResponse> {
    return this.rpc.unary(TodoServiceUpdateTodoDesc, UpdateTodoRequest.fromPartial(request), metadata);
  }

  DeleteTodo(request: DeepPartial<DeleteTodoRequest>, metadata?: grpc.Metadata): Promise<DeleteTodoResponse> {
    return this.rpc.unary(TodoServiceDeleteTodoDesc, DeleteTodoRequest.fromPartial(request), metadata);
  }
}

export const TodoServiceDesc = { serviceName: "todo.TodoService" };

export const TodoServiceGetTodosDesc: UnaryMethodDefinitionish = {
  methodName: "GetTodos",
  service: TodoServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetTodosRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetTodosResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const TodoServiceCreateTodoDesc: UnaryMethodDefinitionish = {
  methodName: "CreateTodo",
  service: TodoServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return CreateTodoRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = CreateTodoResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const TodoServiceUpdateTodoDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateTodo",
  service: TodoServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateTodoRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateTodoResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const TodoServiceDeleteTodoDesc: UnaryMethodDefinitionish = {
  methodName: "DeleteTodo",
  service: TodoServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return DeleteTodoRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = DeleteTodoResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
