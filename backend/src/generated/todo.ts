// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.14.0
// source: todo.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "todo";

/** Todo message */
export interface Todo {
  id: number;
  description: string;
  completed: boolean;
  /** ISO 8601 timestamp */
  createdAt: string;
  /** ISO 8601 timestamp */
  updatedAt: string;
}

/** Request messages */
export interface GetTodosRequest {
}

export interface CreateTodoRequest {
  /** Required, 1-500 characters */
  description: string;
}

export interface UpdateTodoRequest {
  /** Required - todo ID to update */
  id: number;
  /** Optional - new description */
  description?:
    | string
    | undefined;
  /** Optional - new completion status */
  completed?: boolean | undefined;
}

export interface DeleteTodoRequest {
  /** Required - todo ID to delete */
  id: number;
}

/** Response messages */
export interface GetTodosResponse {
  todos: Todo[];
}

export interface CreateTodoResponse {
  todo: Todo | undefined;
}

export interface UpdateTodoResponse {
  todo: Todo | undefined;
}

/** Empty response for successful deletion */
export interface DeleteTodoResponse {
}

/** Error handling */
export interface ErrorDetail {
  field: string;
  message: string;
}

export interface ErrorResponse {
  message: string;
  code: number;
  details: ErrorDetail[];
}

export const TODO_PACKAGE_NAME = "todo";

/** Todo service definition */

export interface TodoServiceClient {
  /** Get all todos */

  getTodos(request: GetTodosRequest, metadata: Metadata, ...rest: any): Observable<GetTodosResponse>;

  /** Create a new todo */

  createTodo(request: CreateTodoRequest, metadata: Metadata, ...rest: any): Observable<CreateTodoResponse>;

  /** Update an existing todo */

  updateTodo(request: UpdateTodoRequest, metadata: Metadata, ...rest: any): Observable<UpdateTodoResponse>;

  /** Delete a todo */

  deleteTodo(request: DeleteTodoRequest, metadata: Metadata, ...rest: any): Observable<DeleteTodoResponse>;
}

/** Todo service definition */

export interface TodoServiceController {
  /** Get all todos */

  getTodos(
    request: GetTodosRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<GetTodosResponse> | Observable<GetTodosResponse> | GetTodosResponse;

  /** Create a new todo */

  createTodo(
    request: CreateTodoRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<CreateTodoResponse> | Observable<CreateTodoResponse> | CreateTodoResponse;

  /** Update an existing todo */

  updateTodo(
    request: UpdateTodoRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<UpdateTodoResponse> | Observable<UpdateTodoResponse> | UpdateTodoResponse;

  /** Delete a todo */

  deleteTodo(
    request: DeleteTodoRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<DeleteTodoResponse> | Observable<DeleteTodoResponse> | DeleteTodoResponse;
}

export function TodoServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getTodos", "createTodo", "updateTodo", "deleteTodo"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TodoService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TodoService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TODO_SERVICE_NAME = "TodoService";
